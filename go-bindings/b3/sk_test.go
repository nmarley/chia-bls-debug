package blschia

import (
	"bytes"
	// "fmt"
	"testing"
)

func TestSecretKey(t *testing.T) {
	// Example seed, used to generate private key. Always use
	// a secure RNG with sufficient entropy to generate a seed.
	seed := []byte{
		0x00, 0x32, 0x06, 0xf4, 0x18, 0xc7, 0x01, 0x19,
		0x34, 0x58, 0xc0, 0x13, 0x12, 0x0c, 0x59, 0x06,
		0xdc, 0x12, 0x66, 0x3a, 0xd1, 0x52, 0x0c, 0x3e,
		0x59, 0x6e, 0xb6, 0x09, 0x2c, 0x14, 0xfe, 0x16,
	}

	result := []byte{
		0x54, 0x3d, 0x7c, 0x46, 0xcb, 0xbf, 0x5b, 0xaa,
		0xbc, 0x4a, 0xb0, 0x16, 0x61, 0xfa, 0xa9, 0x1a,
		0x69, 0x3b, 0x27, 0x04, 0xf6, 0x67, 0xe3, 0x35,
		0x85, 0xe4, 0xd6, 0x3b, 0xa5, 0x06, 0x9e, 0x27,
	}

	sk := SecretKeyFromSeed(seed)
	keyBytes := sk.Serialize()
	if !bytes.Equal(keyBytes, result) {
		t.Errorf("Got %v, expected %v", keyBytes, result)
	}

	pkExpected := []byte{
		0x02, 0xa7, 0xc0, 0x64, 0xfa, 0xf6, 0x1b, 0x55,
		0xd3, 0x39, 0x42, 0xa3, 0x2d, 0xe9, 0x9a, 0x00,
		0xfa, 0x96, 0x26, 0x2e, 0x5f, 0x09, 0xc7, 0x3c,
		0xbe, 0x60, 0x71, 0xe5, 0x8e, 0xbf, 0xad, 0x66,
		0xdb, 0x10, 0xce, 0x9f, 0xe7, 0xbd, 0x59, 0xa8,
		0x65, 0x00, 0xbe, 0xb5, 0x24, 0xa7, 0x89, 0xae,
	}
	pk := sk.PublicKey()
	pubBytes := pk.Serialize()
	// fmt.Printf("pubBytes: %v\n", pubBytes)
	if !bytes.Equal(pubBytes, pkExpected) {
		t.Errorf("Got %v, expected %v", keyBytes, pkExpected)
	}

	pk.Free()
	sk.Free()
}
